/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN ProjectsActionsGenerated.js PLEASE EDIT ../ProjectsActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import ProjectsApi from "../../../api/ProjectsApi";

let actionsFunction = {

  //CRUD METHODS

  // Create projects
  createProjects: function(projects) {
    return function(dispatch) {
      return ProjectsApi
        .createProjects(projects)
        .then(projects => {
          dispatch(actionsFunction.createProjectsSuccess(projects));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createProjectsSuccess: function(projects) {
    return { type: types.CREATE_PROJECTS_SUCCESS, payload: projects };
  },


  // Delete projects
  deleteProjects: function(id) {
    return function(dispatch) {
      return ProjectsApi
        .deleteProjects(id)
        .then(projects => {
          dispatch(actionsFunction.deleteProjectsSuccess(projects));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteProjectsSuccess: function(projects) {
    return { type: types.DELETE_PROJECTS_SUCCESS, payload: projects };
  },


  // Get projects
  loadProjects: function(id) {
    return function(dispatch) {
      return ProjectsApi
        .getOneProjects(id)
        .then(projects => {
          dispatch(actionsFunction.loadProjectsSuccess(projects));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadProjectsSuccess: function(projects) {
    return { type: types.GET_PROJECTS_SUCCESS, payload: projects };
  },

  // Load  list
  loadProjectsList: function() {
    return function(dispatch) {
      return ProjectsApi
        .getProjectsList()
        .then(list => {
          dispatch(actionsFunction.loadProjectsListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadProjectsListSuccess: function(list) {
    return { type: types.LIST_PROJECTS_SUCCESS, payload: list };
  },

	
  // Save projects
  saveProjects: function(projects) {
    return function(dispatch) {
      return ProjectsApi
        .saveProjects(projects)
        .then(projects => {
          dispatch(actionsFunction.saveProjectsSuccess(projects));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveProjectsSuccess: function(projects) {
    return { type: types.UPDATE_PROJECTS_SUCCESS, payload: projects };
  },


};

export default actionsFunction;
